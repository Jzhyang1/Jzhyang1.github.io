const w=[{organization:"Apovo Health (rebranded from Panacea)",href:"https://panacea-tech.com/",position:"Chief Technology Officer",department:"Technology and Development",categories:["Work Experience","Startup"],date:"Nov 2024 - Present",location:"Austin, TX, USA",image:"/panacea.png",summary:"Leading full stack development of AI-medtech startup for improved outpatient care.",details:`Built React Native frontend and Flask backend on AWS with a personalized recommendation system (see ~~/projects~~). Oversaw development team of 4 and conducting initial pilot testing. 
Implemented developer rotation system to ensure team members gain experience in all aspects of the project. 

The project is a personalized health management platform that uses AI to recommend lifestyle changes and track health metrics for patients with chronic conditions.`},{organization:"The University of Texas at Austin",href:"https://www.cs.utexas.edu/",position:"Turing Scholars Honors Student",department:"Department of Computer Science",categories:["Education"],date:"Aug 2024 - Present",location:"2515 Speedway, Austin, TX 78712",image:"/utseal.png",summary:"Computer science honors student pursuing research and career in compilers."},{organization:"Cinco Learning",position:"Computer Science Tutor",department:"Independent Contractor",categories:["Work Experience"],date:"Nov 2023 - Present",location:"Katy, TX, USA",summary:"Tutored students in high school computer science, data structures, and USACO bronze competition logic with C++ and Java Swing."},{organization:"FleetSmart Apps",href:"https://fleetsmart.biz/",position:"Mobile App Developer",department:"Development",categories:["Work Experience","Internship"],date:"Nov 2023 - May 2024",location:"Austin, TX, USA",summary:"Built the organization’s first cross-platform mobile app integrating web and native features for a self-growth platform."},{organization:"Catalyst Collective",href:"https://www.purposepro.org/",position:"Mobile App Developer",department:"Technology",categories:["Work Experience"],date:"Mar 2023 - Nov 2023",location:"Austin, TX, USA",summary:"Published and maintained the mobile version of the Purpose Project platform; integrated with legacy codebase as sole developer."},{organization:"EduBeyond",href:"https://edubeyond.ai/",position:"Full Stack Developer",department:"Technology Team",categories:["Work Experience","Internship","Startup"],date:"Mar 2023 - Feb 2024",location:"Vancouver, Canada",image:"https://edubeyond.ai/logos/logo_transparent_inline.png",summary:"Implemented full stack LMS features including announcements, messaging, document handling, and generative AI. Scaled platform to 30,000 users."},{organization:"The University of Houston",href:"https://rpglab.github.io/people/Jonathan-Yang/",position:"Research Assistant",department:"Renewable Power Grid Lab",categories:["Work Experience","Research"],date:"Dec 2022 - Dec 2023",location:"Houston, TX, USA",image:"https://rpglab.github.io/images/Logo_RPGLab.png",summary:"Researched ML techniques for ERCOT load forecasting using DNNs, SVMs, LSTMs, and CNNs. Published results in IEEE TPEC 2024."}],A=[{organization:"Apovo Recommendation Engine",categories:["Machine Learning"],date:"Nov 2024 - Present",summary:"A hybrid recommendation engine using content-based filtering and collaborative filtering.",details:`Written in Python + Flask with PyMongo for database and PyTorch and Scikit-learn for machine learning. Microservice design though currently bundled in a monolith. Performed many optimizations such as progressive rendering, asynchronous microservies, caching, and inlining decision trees for fast recommendations (TTFB < 1s, TTLB < 3s). Developing 3 phases of the recommendation engine: 
Phase 1 - Cold start: use ML techniques (NLP, classifiers/tagging, etc) to give good content based suggestions. Guarantee that relevant content is returned for the initial users of the app when we don’t know which resources are popular. 
Phase 2 - Few users: Item based collaborative filtering using ML techniques on the contents of the items (eg embeddings* and tags). We do not have as much data as would be possible to calculate item similarity for all items as not all items have interaction data yet, and likewise we do not perform user-based collaborative filtering because the small number of users and large number of resources makes it unlikely for meaningful comparison metrics for access patterns (we could perform ML techniques to do user-based recs on a smaller set of data such as tags, but we will address that below). 
Phase 2.1: Given our case of homogenous users, we can simply track popularity of tags, organizations, etc for the entire userbase to perform a rudimentary user-based collaborative filtering 
Phase 2.2: to prevent specific resources from always dominating a user’s feed, we added an extra stratified search phase on different media types. 
Phase 3 - Many users: we may begin using more advanced techniques for recommendations such as full-scale matrix factorization collaborative filtering based on similar clicks (independent of previous tagging). Not sure how to do that yet. A specific detail is that due to users’ temporal changes, we store weekly snapshots of individual users’ accesses and use the similarity between the past week’s access patterns with another user’s patterns to acquire this week’s likely patterns`},{organization:"C++ Autograd Library",categories:["Machine Learning","GPU Computing"],date:"June 2025 - Present",summary:"A model-training library for C++ that supports autograd, GPU computing, and distributed training.",details:"Written in C++23. The library supports compile-time size definitions for tensors (C++ metaprogramming), autograd, and distributed training. Activation functions (e.g. Tanh, Sigmoid) and initializers (e.g. Xavier) are built-in. The library supports both CPU and GPU computing with CUDA."},{organization:"16-bit Computer",categories:["Computer Architecture","Assembly","FPGA"],date:"April 2025 - May 2025",summary:"Worked in a team of 4 to build a 16-bit computer architecture with a custom instruction set, implemented in Verilog for an FPGA. Along with it included custom emulator, assembler, and C compiler. Wrote programs in assembly and C to run on the architecture.",details:"The computer is a 16 bit pipelined RISC processor with 16 registers. Supported operations are load/store, add/subtract, move. The architecture (designed for games) includes memory mappings for tilemaps, sprites, and scroll registers. This is all reflected in the Rust emulator including graphics. A Snake game written in assembly (with the help of macros) and Conway's Game of Life written in C were implemented to run on the architecture. The assembler is written in Python. The project was done as the final project for the Computer Architecture course at UT Austin."},{organization:"Concurrency Libraries",categories:["Multiprocess","Multithread","Libraries"],date:"Feb 2025 - Mar 2025",summary:"A collection of C++ libraries for memory allocation and coroutine orchestration in multiprocess (via shared mmap memory) and multithread processes.",details:"Written in C++17. 1) A coalescing arena-based memory allocator for shared mmap memory between forked processes. 2) A multiple-fixed stack multithreaded go-like coroutine library that supports message-passing and recursive optimizations."},{organization:"Fun-Lang",categories:["Programming Language","Compiler","Interpreter"],date:"Feb 2025",summary:"A programming language built from a subset of Python with just-in-time compilation, constant folding, variable replacement, and various compiler optimizations.",details:"Written in C. The language supports variables, functions, and control flow. It includes an interpreter built with a recursive descent parser (later modified into a Pratt parser). A compiler is built for the x86-64 architecture that outputs GNU assembly. The compiler performs optimizations such as constant folding, tail-call optimization, variable replacement, and dead code elimination. The just-in-time compiler generates x86-64 binary in mmaped memory (POSIX-only) on function-boundaries on the fly and caches them."},{organization:"ARM64 decomplier and emulator",categories:["Assembly"],date:"Feb 2025",summary:"An emulator that runs a subset of the ARM64 architecture on x86 computers as well as outputs human-readable assembly for ARM64 binaries.",details:"Written in C. The emulator supports a subset of the ARM64 architecture, including arithmetic, memory access, and control flow. The decompiler outputs human-readable ARM64 assembly from the binary to work with the emulator."},{organization:"Monomer",href:"https://monomer.dev/",categories:["Programming Language","Compiler","Interpreter"],date:"Nov 2020 - Present",summary:"General purpose programming language."},{organization:"Esindeen",href:"https://esindeen.com/",categories:["Web app","Cloud"],date:"Feb 2024 - Aug 2024",summary:"Online college application essay tracker."},{organization:"MERL",href:"https://sites.google.com/view/meerl",categories:["Programming Language","Preprocessor","Interpreter"],date:"May 2020 - Nov 2020",summary:"General purpose programming language."},{organization:"Fermi Guesser",href:"https://jzhyang.com/old/games/fermi.html",categories:["Web app"],date:"Jan 2023 - May 2023",summary:"Science Olympiad memorization tool."},{organization:"Forbidden Island",href:"https://jzhyang.com/old/ForbiddenIsland.html",categories:["Game","Java Swing"],date:"Sept 2022 - Dec 2022",summary:"High school board game project."},{organization:"Snake Game",href:"https://jzhyang.com/old/games/snake/TraditionalSnake.html",categories:["Game","Web app"],date:"Sept 2023",summary:"High school web game project."},{organization:"Autoschedule",date:"Jan 2020",categories:["Windows Desktop Application","Scripting language"],summary:"Fully native Windows command bundler for temporal organization."}],v={bio:w,projects:A};let d=[];const b=document.getElementById("topbar"),k=document.getElementById("shell-content"),f=document.getElementById("output"),u=document.getElementById("command-input"),P=document.getElementById("shell-form"),y=document.getElementById("current-path"),g=n=>{const e=n.startsWith("/")?[]:new Array(...d);for(const o of n.split("/").filter(Boolean)){const t=e.reduce((m,a)=>m[a],v);if(o===".."&&e.length>0)e.pop();else if(o!==".")if(Object.keys(t).includes(o)&&typeof t[o]=="object")e.push(o);else return null}return e},h=n=>n.reduce((e,o)=>Array.isArray(e)?e.find(t=>t.organization===o):typeof e=="object"?e[o]:"",v),C=n=>{if(!(f&&u&&b&&y)){console.log("missing an element");return}const e=n.match(/(?:[^\s"]+|"[^"]*")+/g)?.map(m=>m.replaceAll('"',""))??[],o=e[0],t=e.slice(1);switch(o){case"help":i("Available commands: echo, ls, cat, open, cd, clear");break;case"echo":i(t.join(" "));break;case"ls":{const a=t.length?g(t[0]):d;if(a){const s=h(a);i((Array.isArray(s)?s.map(r=>r.organization):Object.keys(s)).map(r=>r.includes(" ")?`"${r}"`:r).join("  "))}else i(`ls ${t[0]}: No such directory`);break}case"cat":{const a=t[0],s=a.substring(a.lastIndexOf("/")+1),r=g(a.substring(0,a.lastIndexOf("/"))),c=r?h(r):{},l=Array.isArray(c)?c.find(p=>p.organization===s):c[s];i(l?typeof l=="object"?JSON.stringify(l):l.toString():`cat ${t[0]}: No such file or directory`);break}case"open":{const a=t[0],s=a.substring(a.lastIndexOf("/")+1),r=g(a.substring(0,a.lastIndexOf("/"))),c=r?h(r):{},l=Array.isArray(c)?c.find(p=>p.organization===s):c[s];if(l)try{window.open(l.href,"_blank"),i(`open ${t[0]}: Link opened successfully`)}catch{i(`open ${t[0]}: Failed to open link or no corresponding link`)}else i(`open ${t[0]}: No such file or directory`);break}case"cd":const m=g(t[0]);m?(d=m,y.textContent=`/${d.join("/")} $ `,b.textContent=`/${d.join("/")}`):i(`cd ${t[0]}: No such directory`);break;case"clear":f?.replaceChildren();break;default:i(`${o}: command not found`)}},i=n=>{const e=document.createElement("div");e.textContent=n,f?.appendChild(e)};P?.addEventListener("submit",n=>{n.preventDefault();const e=u?.value;C(e),u&&(u.value="")});k?.addEventListener("click",n=>{n.preventDefault(),u.focus()});
