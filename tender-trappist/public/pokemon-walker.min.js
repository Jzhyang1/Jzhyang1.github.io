const PokemonConfig = {
  pokemonPool: {
    common: [
      { name: "pikachu", id: 25 },
      { name: "bulbasaur", id: 1 },
      { name: "charmander", id: 4 },
      { name: "squirtle", id: 7 },
      { name: "meowth", id: 52 },
      { name: "jigglypuff", id: 39 },
      { name: "pidgey", id: 16 },
      { name: "rattata", id: 19 },
      { name: "spearow", id: 21 },
      { name: "nidoran", id: 29 },
    ],
    uncommon: [
      { name: "vulpix", id: 37 },
      { name: "growlithe", id: 58 },
      { name: "ponyta", id: 77 },
      { name: "cubone", id: 104 },
      { name: "eevee", id: 133 },
      { name: "oddish", id: 43 },
      { name: "psyduck", id: 54 },
      { name: "machop", id: 66 },
      { name: "bellsprout", id: 69 },
      { name: "tentacool", id: 72 },
    ],
    rare: [
      { name: "dratini", id: 147 },
      { name: "lapras", id: 131 },
      { name: "snorlax", id: 143 },
      { name: "aerodactyl", id: 142 },
      { name: "kangaskhan", id: 115 },
      { name: "scyther", id: 123 },
      { name: "pinsir", id: 127 },
      { name: "tauros", id: 128 },
    ],
    legendary: [
      { name: "mewtwo", id: 150 },
      { name: "mew", id: 151 },
      { name: "articuno", id: 144 },
      { name: "zapdos", id: 145 },
      { name: "moltres", id: 146 },
    ],
  },
};
class UIComponents {
  static createBackpack() {
    const backpack = document.createElement("div");
    backpack.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            cursor: pointer;
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: transform 0.2s;
        `;

    backpack.innerHTML = `
            <svg width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M4 7h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2z"></path>
                <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
            </svg>
        `;

    return backpack;
  }

  static createPokeball(x, y) {
    const pokeball = document.createElement("div");
    pokeball.style.cssText = `
            position: absolute;
            width: 40px;
            height: 40px;
            background-image: url('https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/poke-ball.png');
            background-size: contain;
            background-repeat: no-repeat;
            pointer-events: none;
            z-index: 10000;
            transform: translate(-50%, -50%);
        `;
    return pokeball;
  }
}
class MenuManager {
  constructor(stats, pokemonValues) {
    this.stats = stats;
    this.pokemonValues = pokemonValues;
    this.menu = null;
    this.pokedexView = null;
    this.sortOrder = "name"; // 'name', 'rarity', 'date'
    this.filterText = "";
  }

  getTabContent(tab) {
    const tabContent = {
      Stats: `
                <div style="margin-bottom: 20px;">
                    <h3 style="margin: 0 0 10px 0;">Stats</h3>
                    <div style="
                        background: #f8f8f8;
                        padding: 15px;
                        border-radius: 10px;
                        margin-bottom: 15px;
                        display: flex;
                        align-items: center;
                        gap: 10px;
                    ">
                        <span style="font-size: 1.2em;">💰</span>
                        <span style="font-weight: bold; font-size: 1.2em;">${this.stats.currency.toLocaleString()}</span>
                    </div>
                    <p style="margin: 0;">Total Caught: ${
                      this.stats.totalCaught
                    }</p>
                    <p style="margin: 0;">Shiny Caught: ${
                      this.stats.shinyCaught
                    }</p>
                    <p style="margin: 0;">Common: ${
                      this.stats.caughtByRarity.common
                    }</p>
                    <p style="margin: 0;">Uncommon: ${
                      this.stats.caughtByRarity.uncommon
                    }</p>
                    <p style="margin: 0;">Rare: ${
                      this.stats.caughtByRarity.rare
                    }</p>
                    <p style="margin: 0;">Legendary: ${
                      this.stats.caughtByRarity.legendary
                    }</p>
                </div>
            `,
      Pokedex: `
                <div style="margin-bottom: 20px;">
                    <h3 style="margin: 0 0 10px 0;">Pokedex</h3>
                    <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; max-height: 300px; overflow-y: auto;">
                        ${
                          this.stats.caughtPokemon.length === 0
                            ? '<div style="grid-column: 1 / -1; text-align: center; padding: 20px; color: #666;">No Pokemon caught yet!</div>'
                            : this.stats.caughtPokemon
                                .map(
                                  (pokemon) => `
                                <div class="pokedex-entry" style="
                                    padding: 10px;
                                    border-radius: 8px;
                                    background: ${
                                      pokemon.shiny ? "#FFD700" : "#f5f5f5"
                                    };
                                    display: flex;
                                    align-items: center;
                                    gap: 10px;
                                    cursor: pointer;
                                ">
                                    <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${
                                      pokemon.shiny ? "shiny/" : ""
                                    }${pokemon.id}.gif" 
                                         style="width: 40px; height: 40px;"
                                         onerror="this.src='https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${
                                           pokemon.id
                                         }.png'"
                                    />
                                    <div style="flex: 1;">
                                        <div style="font-weight: bold;">${
                                          pokemon.name
                                        }</div>
                                        <div style="font-size: 0.8em; color: #666;">${
                                          pokemon.rarity
                                        }</div>
                                        ${
                                          pokemon.shiny
                                            ? '<div style="color: #FFD700;">✨ Shiny</div>'
                                            : ""
                                        }
                                    </div>
                                </div>
                            `
                                )
                                .join("")
                        }
                    </div>
                </div>
            `,
      "How to Play": `
                <div style="margin-bottom: 20px;">
                    <h3 style="margin: 0 0 10px 0;">How to Play</h3>
                    <p style="margin: 0;">Click on Pokemon to catch them! Different Pokemon have different rarity levels.</p>
                    <p style="margin: 10px 0 0 0;">✨ Shiny Pokemon are rare variants with a special appearance!</p>
                    <p style="margin: 10px 0 0 0;">Rarity chances:</p>
                    <ul style="margin: 5px 0 0 0; padding-left: 20px;">
                        <li>Common: 60%</li>
                        <li>Uncommon: 25%</li>
                        <li>Rare: 10%</li>
                        <li>Legendary: 5%</li>
                    </ul>
                    <p style="margin: 10px 0 0 0;">Pokemon Values:</p>
                    <ul style="margin: 5px 0 0 0; padding-left: 20px;">
                        <li>Common: ${this.pokemonValues.common} coins</li>
                        <li>Uncommon: ${this.pokemonValues.uncommon} coins</li>
                        <li>Rare: ${this.pokemonValues.rare} coins</li>
                        <li>Legendary: ${this.pokemonValues.legendary} coins</li>
                        <li>Shiny Pokemon are worth ${this.pokemonValues.shinyMultiplier}x more!</li>
                    </ul>
                </div>
            `,
    };
    return tabContent[tab];
  }

  createBackpackMenu() {
    if (this.menu) {
      this.menu.remove();
    }

    const menu = document.createElement("div");
    menu.className = "backpack-menu";
    menu.style.cssText = `
            position: fixed;
            bottom: 80px;
            right: 20px;
            width: 300px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.2);
            padding: 20px;
            z-index: 10000;
            display: none;
        `;

    const tabs = ["Stats", "Pokedex", "How to Play"];

    // Create tab buttons
    const tabButtons = document.createElement("div");
    tabButtons.style.cssText = `
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        `;

    tabs.forEach((tab) => {
      const button = document.createElement("button");
      button.textContent = tab;
      button.style.cssText = `
                padding: 5px 10px;
                border: none;
                background: none;
                cursor: pointer;
                border-radius: 5px;
                transition: background 0.2s;
            `;

      button.addEventListener("click", () => {
        // Remove active class from all buttons
        tabButtons.querySelectorAll("button").forEach((btn) => {
          btn.style.background = "";
          btn.style.fontWeight = "normal";
        });

        // Add active class to clicked button
        button.style.background = "#f0f0f0";
        button.style.fontWeight = "bold";

        // Update content
        contentDiv.innerHTML = this.getTabContent(tab);

        // Add click handlers for Pokedex entries if we're on the Pokedex tab
        if (tab === "Pokedex") {
          contentDiv.querySelectorAll(".pokedex-entry").forEach((entry) => {
            entry.addEventListener("click", () => this.showFullPokedex());
          });
        }
      });

      tabButtons.appendChild(button);
    });

    // Create content div
    const contentDiv = document.createElement("div");
    contentDiv.innerHTML = this.getTabContent("Stats");

    // Set initial active tab
    tabButtons.firstChild.style.background = "#f0f0f0";
    tabButtons.firstChild.style.fontWeight = "bold";

    // Add elements to menu
    menu.appendChild(tabButtons);
    menu.appendChild(contentDiv);

    this.menu = menu;
    return menu;
  }

  updateMenu(activeTab = undefined, shouldShow = undefined) {
    if (this.menu === null) {
      this.menu = this.createBackpackMenu();
      document.body.appendChild(this.menu);
      activeTab = activeTab || "Stats";
    }

    if (activeTab === undefined) {
      activeTab =
        this.menu.querySelector(
          'button[style*="background: rgb(240, 240, 240)"]'
        )?.textContent || "Stats";
    }

    if (shouldShow === undefined) {
      shouldShow = this.menu.style.display !== "none";
    }

    // Set the active tab
    const tabButtons = this.menu.querySelectorAll("button");
    const contentDiv = this.menu.querySelector("div:last-child");
    tabButtons.forEach((button) => {
      if (button.textContent === activeTab) {
        button.style.background = "#f0f0f0";
        button.style.fontWeight = "bold";
        contentDiv.innerHTML = this.getTabContent(activeTab);

        if (activeTab === "Pokedex") {
          contentDiv.querySelectorAll(".pokedex-entry").forEach((entry) => {
            entry.addEventListener("click", () => this.showFullPokedex());
          });
        }
      } else {
        button.style.background = "";
        button.style.fontWeight = "normal";
      }
    });

    // Set visibility
    this.menu.style.display = shouldShow ? "block" : "none";
  }

  toggleMenu() {
    if (!this.menu) {
      this.updateMenu("Stats", true);
    } else {
      const isVisible = this.menu.style.display !== "none";
      const activeTab =
        this.menu.querySelector(
          'button[style*="background: rgb(240, 240, 240)"]'
        )?.textContent || "Stats";
      this.updateMenu(activeTab, !isVisible);
    }
  }

  showFullPokedex() {
    if (this.pokedexView) {
      return;
    }

    const pokedexView = document.createElement("div");
    pokedexView.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 1200px;
            height: 85%;
            background: white;
            border-radius: 20px;
            box-shadow: 0 4px 30px rgba(0,0,0,0.3);
            padding: 30px;
            z-index: 10001;
            display: flex;
            flex-direction: column;
            gap: 20px;
            font-family: Arial, sans-serif;
        `;

    // Header with controls
    const header = document.createElement("div");
    header.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 20px;
            border-bottom: 2px solid #eee;
            margin-bottom: 10px;
            width: 100%;
        `;

    // Title
    const title = document.createElement("h2");
    title.textContent = "Pokédex";
    title.style.cssText = `
            margin: 0;
            color: #333;
            font-size: 24px;
        `;

    // Search and sort container
    const controlsContainer = document.createElement("div");
    controlsContainer.style.cssText = `
            display: flex;
            gap: 20px;
            align-items: center;
        `;

    // Search input
    const searchInput = document.createElement("input");
    searchInput.type = "text";
    searchInput.placeholder = "Search Pokemon...";
    searchInput.style.cssText = `
            padding: 10px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            width: 250px;
            font-size: 14px;
            transition: border-color 0.2s;
        `;
    searchInput.addEventListener("input", (e) => {
      this.filterText = e.target.value.toLowerCase();
      this.updatePokedexContent();
    });
    searchInput.addEventListener("focus", () => {
      searchInput.style.borderColor = "#666";
    });
    searchInput.addEventListener("blur", () => {
      searchInput.style.borderColor = "#ddd";
    });

    // Sort controls
    const sortControls = document.createElement("div");
    sortControls.style.cssText = `
            display: flex;
            gap: 10px;
        `;

    ["name", "rarity", "date"].forEach((sortType) => {
      const button = document.createElement("button");
      button.textContent = `Sort by ${sortType}`;
      button.style.cssText = `
                padding: 10px 15px;
                border: 2px solid #ddd;
                border-radius: 8px;
                background: ${
                  this.sortOrder === sortType ? "#f0f0f0" : "white"
                };
                color: ${this.sortOrder === sortType ? "#333" : "#666"};
                cursor: pointer;
                font-size: 14px;
                transition: all 0.2s;
            `;
      button.addEventListener("mouseover", () => {
        button.style.borderColor = "#666";
      });
      button.addEventListener("mouseout", () => {
        if (this.sortOrder !== sortType) {
          button.style.borderColor = "#ddd";
        }
      });
      button.addEventListener("click", () => {
        this.sortOrder = sortType;
        this.updatePokedexContent();
        sortControls.querySelectorAll("button").forEach((btn) => {
          btn.style.background = btn === button ? "#f0f0f0" : "white";
          btn.style.borderColor = btn === button ? "#666" : "#ddd";
        });
      });
      sortControls.appendChild(button);
    });

    controlsContainer.appendChild(searchInput);
    controlsContainer.appendChild(sortControls);
    header.appendChild(title);
    header.appendChild(controlsContainer);
    pokedexView.appendChild(header);

    // Close button
    const closeButton = document.createElement("button");
    closeButton.innerHTML = "×";
    closeButton.style.cssText = `
            position: absolute;
            top: 20px;
            right: 20px;
            width: 40px;
            height: 40px;
            border: none;
            background: none;
            font-size: 28px;
            cursor: pointer;
            color: #666;
            transition: color 0.2s;
        `;
    closeButton.addEventListener("mouseover", () => {
      closeButton.style.color = "#333";
    });
    closeButton.addEventListener("mouseout", () => {
      closeButton.style.color = "#666";
    });
    closeButton.addEventListener("click", () => {
      this.pokedexView.remove();
      this.pokedexView = null;
    });
    pokedexView.appendChild(closeButton);

    // Content container (grid of pokemon)
    const contentContainer = document.createElement("div");
    contentContainer.style.cssText = `
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            flex: 1;
            overflow-y: auto;
            padding: 10px;
            scrollbar-width: thin;
            scrollbar-color: #ddd #f5f5f5;
        `;
    contentContainer.id = "pokedex-content";
    pokedexView.appendChild(contentContainer);

    this.pokedexView = pokedexView;
    document.body.appendChild(pokedexView);
    this.updatePokedexContent();
  }

  updatePokedexContent() {
    const contentContainer = document.getElementById("pokedex-content");
    let filteredPokemon = [...this.stats.caughtPokemon];

    // Apply filter
    if (this.filterText) {
      filteredPokemon = filteredPokemon.filter((pokemon) =>
        pokemon.name.toLowerCase().includes(this.filterText)
      );
    }

    // Apply sorting
    filteredPokemon.sort((a, b) => {
      switch (this.sortOrder) {
        case "name":
          return a.name.localeCompare(b.name);
        case "rarity": {
          const rarityOrder = { common: 0, uncommon: 1, rare: 2, legendary: 3 };
          return rarityOrder[a.rarity] - rarityOrder[b.rarity];
        }
        case "date":
          return b.dateCaught - a.dateCaught;
        default:
          return 0;
      }
    });

    const getRarityStars = (rarity) => {
      const stars = {
        common: "★",
        uncommon: "★★",
        rare: "★★★",
        legendary: "★★★★",
      };
      return stars[rarity] || "";
    };

    const formatDate = (timestamp) => {
      const date = new Date(timestamp);
      return date.toLocaleDateString() + " " + date.toLocaleTimeString();
    };

    contentContainer.innerHTML =
      filteredPokemon.length === 0
        ? '<div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666; font-size: 18px;">No Pokemon found</div>'
        : filteredPokemon
            .map(
              (pokemon) => `
                <div style="
                    padding: 20px;
                    border-radius: 15px;
                    background: ${pokemon.shiny ? "#FFF8E1" : "#f8f8f8"};
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 15px;
                    min-width: 80px;
                    max-width: 300px;
                    min-height: 100px;
                    max-height: 350px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
                    transition: transform 0.2s, box-shadow 0.2s;
                    border: 2px solid ${
                      pokemon.shiny ? "#FFD700" : "transparent"
                    };
                " onmouseover="this.style.transform='translateY(-5px)';this.style.boxShadow='0 5px 15px rgba(0,0,0,0.1)'"
                  onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 10px rgba(0,0,0,0.05)'">
                    <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${
                      pokemon.shiny ? "shiny/" : ""
                    }${pokemon.id}.gif" 
                         style="width: 100px; height: 100px;"
                         onerror="this.src='https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${
                           pokemon.id
                         }.png'"
                    />
                    <div style="text-align: center;">
                        <div style="font-weight: bold; font-size: 1.2em; color: #333;">${
                          pokemon.name
                        }</div>
                        <div style="color: #666; margin: 5px 0;">${getRarityStars(
                          pokemon.rarity
                        )}</div>
                        <div style="font-size: 0.9em; color: #888;">Caught: ${formatDate(
                          pokemon.dateCaught
                        )}</div>
                        ${
                          pokemon.shiny
                            ? '<div style="color: #FFD700; margin-top: 5px;">✨ Shiny</div>'
                            : ""
                        }
                        <button class="trade-button" style="
                            margin-top: 10px;
                            padding: 8px 16px;
                            border: none;
                            background: #ff4444;
                            color: white;
                            border-radius: 5px;
                            cursor: pointer;
                            font-size: 0.9em;
                            transition: background 0.2s;
                        " onmouseover="this.style.background='#ff6666'"
                          onmouseout="this.style.background='#ff4444'"
                          onclick="event.stopPropagation(); window.walker.menuManager.confirmTrade(${
                            pokemon.id
                          })">
                            Trade
                        </button>
                    </div>
                </div>
            `
            )
            .join("");
  }

  confirmTrade(pokemonId) {
    const pokemon = this.stats.caughtPokemon.find((p) => p.id === pokemonId);
    if (!pokemon) return;

    const baseValue = this.pokemonValues[pokemon.rarity];
    const value = pokemon.shiny
      ? baseValue * this.pokemonValues.shinyMultiplier
      : baseValue;
    const tradeValue = Math.floor(value * 0.8);

    if (confirm(`Trade ${pokemon.name} for ${tradeValue} coins?`)) {
      window.walker.tradePokemon(pokemonId);
      this.updatePokedexContent();
    }
  }
}
class PokemonWalker {
  constructor(options = {}) {
    this.options = {
      maxPokemon: options.maxPokemon || 3,
      movementSpeed: options.movementSpeed || 1.5,
      spawnInterval: options.spawnInterval || 8000,
      minSize: options.minSize || 80,
      maxSize: options.maxSize || 120,
      edgeDistance: options.edgeDistance || 100,
      shinyChance: options.shinyChance || 0.01, // 1% chance for shiny
      ...options,
    };

    // Define Pokemon with rarity tiers
    this.pokemonPool = {
      common: [
        { name: "pikachu", id: 25 },
        { name: "bulbasaur", id: 1 },
        { name: "charmander", id: 4 },
        { name: "squirtle", id: 7 },
        { name: "meowth", id: 52 },
        { name: "jigglypuff", id: 39 },
        { name: "pidgey", id: 16 },
        { name: "rattata", id: 19 },
        { name: "spearow", id: 21 },
        { name: "nidoran", id: 29 },
      ],
      uncommon: [
        { name: "vulpix", id: 37 },
        { name: "growlithe", id: 58 },
        { name: "ponyta", id: 77 },
        { name: "cubone", id: 104 },
        { name: "eevee", id: 133 },
        { name: "oddish", id: 43 },
        { name: "psyduck", id: 54 },
        { name: "machop", id: 66 },
        { name: "bellsprout", id: 69 },
        { name: "tentacool", id: 72 },
        { name: "koffing", id: 109 },
        { name: "weezing", id: 110 },
        { name: "gastly", id: 92 },
        { name: "haunter", id: 93 },
        { name: "gengar", id: 94 },
        { name: "onix", id: 95 },
        { name: "drowzee", id: 96 },
        { name: "hypno", id: 97 },
        { name: "krabby", id: 98 },
        { name: "kingler", id: 99 },
      ],
      rare: [
        { name: "dratini", id: 147 },
        { name: "lapras", id: 131 },
        { name: "snorlax", id: 143 },
        { name: "aerodactyl", id: 142 },
        { name: "kangaskhan", id: 115 },
        { name: "scyther", id: 123 },
        { name: "pinsir", id: 127 },
        { name: "tauros", id: 128 },
        { name: "charizard", id: 6 },
        { name: "blastoise", id: 9 },
        { name: "venusaur", id: 3 },
      ],
      legendary: [
        { name: "mewtwo", id: 150 },
        { name: "mew", id: 151 },
        { name: "articuno", id: 144 },
        { name: "zapdos", id: 145 },
        { name: "moltres", id: 146 },
        { name: "dialga", id: 483 },
        { name: "palkia", id: 484 },
        { name: "giratina", id: 487 },
        { name: "cresselia", id: 488 },
        { name: "phione", id: 490 },
        { name: "manaphy", id: 494 },
        { name: "regigigas", id: 486 },
        { name: "regice", id: 485 },
        { name: "registeel", id: 487 },
        { name: "regirock", id: 488 },
        { name: "latias", id: 380 },
        { name: "latios", id: 381 },
        { name: "jirachi", id: 385 },
        { name: "deoxys", id: 386 },
        { name: "rayquaza", id: 384 },
        { name: "arceus", id: 493 },
        { name: "xerneas", id: 716 },
        { name: "yveltal", id: 792 },
        { name: "zacian", id: 888 },
        { name: "zamazenta", id: 889 },
        { name: "eternatus", id: 890 },
      ],
    };

    // Load stats from localStorage or initialize new stats
    this.stats = this.loadStats();

    // Define Pokemon values
    this.pokemonValues = {
      common: 100,
      uncommon: 500,
      rare: 2000,
      legendary: 10000,
      shinyMultiplier: 5,
    };

    this.pokemon = [];
    this.menuManager = new MenuManager(this.stats, this.pokemonValues);
    this.init();

    // Add resize handler
    window.addEventListener("resize", () => this.handleResize());
  }

  loadStats() {
    const savedStats = localStorage.getItem("pokemonWalkerStats");
    if (savedStats) {
      return JSON.parse(savedStats);
    }

    // Initialize new stats if none exist
    return {
      totalCaught: 0,
      caughtByRarity: {
        common: 0,
        uncommon: 0,
        rare: 0,
        legendary: 0,
      },
      caughtPokemon: [],
      shinyCaught: 0,
      currency: 0,
    };
  }

  saveStats() {
    localStorage.setItem("pokemonWalkerStats", JSON.stringify(this.stats));
  }

  init() {
    // Create container for Pokemon
    this.container = document.createElement("div");
    this.container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9999;
        `;
    document.body.appendChild(this.container);

    // Add backpack
    const backpack = UIComponents.createBackpack();
    backpack.addEventListener("click", () => this.menuManager.toggleMenu());
    document.body.appendChild(backpack);

    // Start spawning Pokemon
    this.startSpawning();
  }

  handleResize() {
    // Update Pokemon sizes on window resize
    this.pokemon.forEach((pokemon) => {
      const size = this.calculatePokemonSize();
      pokemon.element.style.width = `${size}px`;
      pokemon.style.height = `${size}px`;
    });
  }

  calculatePokemonSize() {
    const screenArea = window.innerWidth * window.innerHeight;
    const baseSize = Math.sqrt(screenArea) * 0.02; // 2% of screen diagonal
    return Math.max(
      this.options.minSize,
      Math.min(this.options.maxSize, baseSize)
    );
  }

  selectRandomPokemon() {
    const rarityRoll = Math.random();
    let selectedPool;
    let rarity;

    if (rarityRoll < 0.7) {
      // 70% chance for common
      selectedPool = this.pokemonPool.common;
      rarity = "common";
    } else if (rarityRoll < 0.9) {
      // 20% chance for uncommon
      selectedPool = this.pokemonPool.uncommon;
      rarity = "uncommon";
    } else if (rarityRoll < 0.995) {
      // 10% chance for rare
      selectedPool = this.pokemonPool.rare;
      rarity = "rare";
    } else {
      // .5% chance for legendary
      selectedPool = this.pokemonPool.legendary;
      rarity = "legendary";
    }

    const isShiny = Math.random() < this.options.shinyChance;

    return {
      ...selectedPool[Math.floor(Math.random() * selectedPool.length)],
      rarity: rarity,
      shiny: isShiny,
    };
  }

  async throwPokeball(startX, startY, targetX, targetY, pokemon) {
    const pokeball = UIComponents.createPokeball(startX, startY);
    this.container.appendChild(pokeball);

    // Calculate throw trajectory
    const distance = Math.sqrt(
      Math.pow(targetX - startX, 2) + Math.pow(targetY - startY, 2)
    );
    const duration = Math.min(2000, distance * 3); // Slower animation

    // Animate pokeball throw
    const startTime = Date.now();
    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(1, elapsed / duration);

      // Parabolic trajectory
      const x = startX + (targetX - startX) * progress;
      const y =
        startY +
        (targetY - startY) * progress -
        Math.sin(progress * Math.PI) * 100;

      pokeball.style.left = `${x}px`;
      pokeball.style.top = `${y}px`;

      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        // Remove pokeball and trigger catch animation
        pokeball.remove();
        this.catchPokemon(pokemon);
      }
    };

    animate();
  }

  createPokemon() {
    if (
      this.pokemon.length >= this.options.maxPokemon ||
      Math.random() > this.options.spawnChance
    )
      return;

    const pokemon = document.createElement("div");
    const selectedPokemon = this.selectRandomPokemon();
    const size = this.calculatePokemonSize();

    // Create sprite container
    const spriteContainer = document.createElement("div");
    spriteContainer.style.cssText = `
            position: absolute;
            width: 100%;
            height: 100%;
            background-image: url('https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${
              selectedPokemon.shiny ? "shiny/" : ""
            }${selectedPokemon.id}.gif');
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            ${
              selectedPokemon.shiny
                ? "filter: brightness(1.2) saturate(1.2);"
                : ""
            }
        `;

    // Create warning indicator
    const warningIndicator = document.createElement("div");
    warningIndicator.style.cssText = `
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            color: #ff4444;
            font-size: 12px;
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
            text-shadow: 0 0 2px white;
        `;

    pokemon.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            pointer-events: auto;
            cursor: pointer;
            transition: transform 0.2s, opacity 0.5s;
            will-change: transform;
            ${selectedPokemon.shiny ? "box-shadow: 0 0 10px #FFD700;" : ""}
        `;

    pokemon.appendChild(spriteContainer);
    pokemon.appendChild(warningIndicator);

    // Determine if Pokemon should move horizontally or vertically
    const isHorizontal = Math.random() < 0.5;
    let startX, startY;

    if (isHorizontal) {
      startX = Math.random() < 0.5 ? 0 : window.innerWidth - size;
      startY =
        this.options.edgeDistance +
        Math.random() *
          (window.innerHeight - 2 * this.options.edgeDistance - size);
    } else {
      startX =
        this.options.edgeDistance +
        Math.random() *
          (window.innerWidth - 2 * this.options.edgeDistance - size);
      startY = Math.random() < 0.5 ? 0 : window.innerHeight - size;
    }

    pokemon.style.left = `${startX}px`;
    pokemon.style.top = `${startY}px`;

    // Add click handler for catching with pokeball animation
    pokemon.addEventListener("click", (e) => {
      const rect = pokemon.getBoundingClientRect();
      const pokemonX = rect.left + rect.width / 2;
      const pokemonY = rect.top + rect.height / 2;
      this.throwPokeball(
        e.clientX - 50,
        e.clientY - 50,
        e.clientX,
        e.clientY,
        pokemon
      );
    });

    this.container.appendChild(pokemon);

    const pokemonObj = {
      ...selectedPokemon,
      element: pokemon,
      x: startX,
      y: startY,
      direction: isHorizontal
        ? startX === 0
          ? 0
          : Math.PI
        : startY === 0
        ? Math.PI / 2
        : -Math.PI / 2,
      speed: this.options.movementSpeed,
      size: size,
      isHorizontal: isHorizontal,
      lastDirectionChange: Date.now(),
      verticalOffset: 0,
      verticalSpeed: Math.random() * 0.01,
      warningIndicator: warningIndicator,
      intervalsPassed: 0,
      maxIntervals: 3,
    };

    this.pokemon.push(pokemonObj);
    this.movePokemon(pokemonObj);

    // Start the run away timer
    this.startRunAwayTimer(pokemonObj);
  }

  movePokemon(pokemonObj) {
    const move = () => {
      if (!pokemonObj.element.parentNode) return;

      const now = Date.now();
      const timeSinceLastChange = now - pokemonObj.lastDirectionChange;

      // Update position
      pokemonObj.x += Math.cos(pokemonObj.direction) * pokemonObj.speed;
      pokemonObj.y += Math.sin(pokemonObj.direction) * pokemonObj.speed;

      // Add subtle floating motion
      pokemonObj.verticalOffset = Math.sin(now * pokemonObj.verticalSpeed) * 3;

      // Edge-based movement
      if (pokemonObj.isHorizontal) {
        // Horizontal movement
        if (
          pokemonObj.x <= 0 ||
          pokemonObj.x >= window.innerWidth - pokemonObj.size
        ) {
          // Reverse direction
          pokemonObj.direction = Math.PI - pokemonObj.direction;
          pokemonObj.lastDirectionChange = now;
        }
        // Keep within edge distance
        if (pokemonObj.y < this.options.edgeDistance) {
          pokemonObj.y = this.options.edgeDistance;
        } else if (
          pokemonObj.y >
          window.innerHeight - pokemonObj.size - this.options.edgeDistance
        ) {
          pokemonObj.y =
            window.innerHeight - pokemonObj.size - this.options.edgeDistance;
        }
      } else {
        // Vertical movement
        if (
          pokemonObj.y <= 0 ||
          pokemonObj.y >= window.innerHeight - pokemonObj.size
        ) {
          // Reverse direction
          pokemonObj.direction = -pokemonObj.direction;
          pokemonObj.lastDirectionChange = now;
        }
        // Keep within edge distance
        if (pokemonObj.x < this.options.edgeDistance) {
          pokemonObj.x = this.options.edgeDistance;
        } else if (
          pokemonObj.x >
          window.innerWidth - pokemonObj.size - this.options.edgeDistance
        ) {
          pokemonObj.x =
            window.innerWidth - pokemonObj.size - this.options.edgeDistance;
        }
      }

      // Update position with subtle floating
      pokemonObj.element.style.left = `${pokemonObj.x}px`;
      pokemonObj.element.style.top = `${
        pokemonObj.y + pokemonObj.verticalOffset
      }px`;

      // Flip sprite based on direction
      const scaleX = Math.cos(pokemonObj.direction) > 0 ? -1 : 1;
      pokemonObj.element.style.transform = `scaleX(${scaleX})`;

      requestAnimationFrame(move);
    };

    move();
  }

  catchPokemon(pokemon) {
    let pokemonObj = this.pokemon.find((p) => p.element === pokemon);

    // Add to caught Pokemon list with date
    const caughtPokemon = {
      ...pokemonObj,
      dateCaught: Date.now(),
    };
    this.stats.caughtPokemon.push(caughtPokemon);

    // Update rarity stats
    this.stats.caughtByRarity[pokemonObj.rarity]++;
    this.stats.totalCaught++;
    if (pokemonObj.shiny) {
      this.stats.shinyCaught++;
    }

    // Save stats to localStorage
    this.saveStats();

    // Update menu if it exists
    if (this.menuManager) {
      this.menuManager.updateMenu();
    }

    // Remove the Pokemon element
    pokemon.remove();
    this.pokemon = this.pokemon.filter((p) => p.element !== pokemon);
  }

  tradePokemon(pokemonId) {
    const index = this.stats.caughtPokemon.findIndex((p) => p.id === pokemonId);
    if (index === -1) return;

    const pokemon = this.stats.caughtPokemon[index];
    const baseValue = this.pokemonValues[pokemon.rarity];
    const value = pokemon.shiny
      ? baseValue * this.pokemonValues.shinyMultiplier
      : baseValue;

    // Add 80% of the Pokemon's value to currency
    this.stats.currency += Math.floor(value * 0.8);

    // Remove the Pokemon
    this.stats.caughtPokemon.splice(index, 1);
    this.stats.caughtByRarity[pokemon.rarity]--;
    this.stats.totalCaught--;
    if (pokemon.shiny) {
      this.stats.shinyCaught--;
    }

    // Save stats to localStorage
    this.saveStats();

    // Update menu
    if (this.menuManager) {
      this.menuManager.updateMenu();
    }
  }

  startSpawning() {
    setInterval(() => this.createPokemon(), this.options.spawnInterval);
  }

  startRunAwayTimer(pokemonObj) {
    const interval = this.options.spawnInterval;
    const timer = setInterval(() => {
      if (!pokemonObj.element.parentNode) {
        clearInterval(timer);
        return;
      }

      pokemonObj.intervalsPassed++;

      if (pokemonObj.intervalsPassed >= pokemonObj.maxIntervals) {
        // Make Pokemon run away
        pokemonObj.element.style.opacity = "0";
        setTimeout(() => {
          if (pokemonObj.element.parentNode) {
            pokemonObj.element.remove();
            this.pokemon = this.pokemon.filter((p) => p !== pokemonObj);
          }
        }, 500);
        clearInterval(timer);
      } else {
        // Show warning indicator
        pokemonObj.warningIndicator.textContent = `⚠️`;
        pokemonObj.warningIndicator.style.opacity = "1";

        // Flash warning
        setTimeout(() => {
          if (pokemonObj.warningIndicator) {
            pokemonObj.warningIndicator.style.opacity = "0";
          }
        }, 1000);
      }
    }, interval);
  }
}

window.addEventListener("load", () => {
  let walker = new PokemonWalker({
    maxPokemon: 5,
    movementSpeed: 1,
    spawnInterval: 3000,
    minSize: 60,
    maxSize: 100,
    spawnChance: 0.05,
  });
  window.walker = walker;
});
