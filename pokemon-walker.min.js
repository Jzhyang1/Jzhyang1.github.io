// cache the pokemon
let PokemonConfig = {
    pokemonPool: new Map(),
    idPool: new Map()
}; 

async function getPokemonByName(name) {
    if (PokemonConfig.pokemonPool.has(name)) {
        return PokemonConfig.pokemonPool.get(name);
    }

    // if the pokemon is not found, check the api
    const response = await fetch(`https://pokeapi.co/api/v2/pokemon-species/${name}`);
    if (!response.ok) return null;

    const data = await response.json();

    // get the evolution chain
    const evolutionChain = await fetch(data.evolution_chain.url);
    const evolutionChainData = await evolutionChain.json();
    const current_evolutions = (function getCurrentEvolutions(current_evolution) {
        if (current_evolution.species.name == name) {
            return current_evolution;
        } else if (current_evolution.evolves_to.length > 0) {
            return current_evolution.evolves_to.reduce((acc, e) => {
                return acc || getCurrentEvolutions(e);
            }, null);
        } else {
            return null;
        }
    })(evolutionChainData.chain);
    const next_evolutions = current_evolutions && current_evolutions.evolves_to.map(e => e.species.name);

    const encounter_rate = data.pal_park_encounters.reduce((acc, e) => acc < e.rate ? e.rate : acc, 1);
    const pokemon = {
        name: data.name,
        id: data.id,
        rarity: data.is_legendary ? 'legendary' : data.is_mythical ? 'mythical' : encounter_rate <= 10 ? 'rare' : encounter_rate <= 20 ? 'uncommon' : 'common',
        evolution: next_evolutions
    };

    PokemonConfig.pokemonPool.set(name, pokemon);
    PokemonConfig.idPool.set(data.id, pokemon);
    return pokemon;
}

async function getPokemonById(id) {
    if (PokemonConfig.idPool.has(id)) {
        return PokemonConfig.idPool.get(id);
    }

    // there are presently only 649 pokemon in version 5, so if the id is greater than that, return null
    if (id > 649) {
        return null;
    }

    // since the pokemon API supports id and name queries, we can reuse the above function
    const pokemon = await getPokemonByName(id);
    return pokemon;
}
class UIComponents {
    static createBackpack() {
        const backpack = document.createElement('div');
        backpack.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            cursor: pointer;
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: transform 0.2s;
        `;
        
        backpack.innerHTML = `
            <svg width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M4 7h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2z"></path>
                <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
            </svg>
        `;
        
        return backpack;
    }

    static createPokeball(x, y) {
        const pokeball = document.createElement('div');
        pokeball.style.cssText = `
            position: absolute;
            width: 40px;
            height: 40px;
            background-image: url('https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/poke-ball.png');
            background-size: contain;
            background-repeat: no-repeat;
            pointer-events: none;
            z-index: 10000;
            transform: translate(-50%, -50%);
        `;
        return pokeball;
    }
} class MenuManager {
    constructor() {
        this.stats = {
            currency: 0,
            candy: 0,
            totalCaught: 0,
            shinyCaught: 0,
            caughtByRarity: {
                common: 0,
                uncommon: 0,
                rare: 0,
                legendary: 0
            },
            caughtPokemon: []
        };

        this.pokemonValues = {
            common: 10,
            uncommon: 25,
            rare: 50,
            legendary: 100,
            shinyMultiplier: 2
        };

        this.filterText = '';
        this.sortOrder = 'date';
        this.sortDirection = 'asc';
        
        // Set up message listener
        window.addEventListener('message', this.handleMessage.bind(this));

        this.menu = null;
        this.pokedexView = null;
        this.activeTab = 'pokedex';

        // Create and initialize the data manager iframe and menu
        this.initializeDataManager();
        this.createMenu();
    }

    initializeDataManager() {
        // Create hidden iframe
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        
        // Use the same protocol as the parent page
        iframe.src = 'https://jzhyang.com/data-manager.html';
        
        document.body.appendChild(iframe);

        // Store iframe reference
        this.dataManagerFrame = iframe;

        // Request initial data
        iframe.onload = () => {
            this.requestData();
        };
    }

    requestData() {
        // Use the same origin as the iframe
        const targetOrigin = this.dataManagerFrame.src;
        this.dataManagerFrame.contentWindow.postMessage({
            type: 'GET_DATA'
        }, targetOrigin);
    }

    handleMessage(event) {
        const { type, data } = event.data;

        if (type === 'DATA_UPDATE') {
            this.stats = data.stats;
            this.pokemonValues = data.pokemonValues;
            this.updateAllDisplays();
        }
    }

    updateAllDisplays() {
        // Only update if menu has been created
        if (this.menu) {
            this.updateMenu();
            this.updatePokedexContent();
        }
    }

    createMenu() {
        this.menu = document.createElement('div');
        this.menu.style.cssText = `
            position: fixed;
            bottom: 80px;
            right: 20px;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            z-index: 1000;
            font-family: Arial, sans-serif;
            min-width: 300px;
            max-width: 80vw;
            max-height: 80vh;
            overflow-y: auto;
            display: none;
        `;

        // Create header with currency and candy display
        const header = document.createElement('div');
        header.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #ccc;
        `;

        const currencyDisplay = document.createElement('div');
        currencyDisplay.style.cssText = `
            font-size: 16px;
            font-weight: bold;
            color: #2c3e50;
        `;
        currencyDisplay.textContent = `💰 ${this.stats.currency}`;
        currencyDisplay.id = "currency-display";

        const candyDisplay = document.createElement('div');
        candyDisplay.style.cssText = `
            font-size: 16px;
            font-weight: bold;
            color: #e74c3c;
        `;
        candyDisplay.textContent = `🍬 ${this.stats.candy}`;
        candyDisplay.id = "candy-display";

        // Add candy purchase button
        const candyButton = document.createElement('button');
        candyButton.textContent = 'Buy Candy';
        candyButton.style.cssText = `
            padding: 5px 10px;
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-left: 10px;
        `;
        candyButton.onclick = () => {
            const amount = prompt('How many candy do you want to buy? (10 currency each)');
            if (amount && !isNaN(amount)) {
                this.purchaseCandy(parseInt(amount)).then(success => {
                    if (!success) {
                        alert('Not enough currency!');
                    }
                });
            }
        };

        header.appendChild(currencyDisplay);
        header.appendChild(candyDisplay);
        header.appendChild(candyButton);
        this.menu.appendChild(header);

        // Create tabs
        const tabs = document.createElement('div');
        tabs.style.cssText = `
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        `;

        const tabNames = ['Pokedex', 'Stats', 'Help'];
        tabNames.forEach(name => {
            const tab = document.createElement('button');
            tab.textContent = name;
            tab.style.cssText = `
                padding: 8px 15px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                background: #eee;
                transition: background 0.3s;
            `;
            tab.onclick = () => this.switchTab(name.toLowerCase());
            tabs.appendChild(tab);
        });

        this.menu.appendChild(tabs);

        // Create content area
        this.content = document.createElement('div');
        this.menu.appendChild(this.content);

        document.body.appendChild(this.menu);
    }

    updateMenu() {
        // Update currency and candy display
        const currencyDisplay = document.getElementById("currency-display");
        const candyDisplay = document.getElementById("candy-display");
        currencyDisplay.textContent = `💰 ${this.stats.currency}`;
        candyDisplay.textContent = `🍬 ${this.stats.candy}`;

        // Update active tab
        const tabs = this.menu.querySelectorAll('button');
        tabs.forEach(tab => {
            tab.style.background = tab.textContent.toLowerCase() === this.activeTab ? '#3498db' : '#eee';
            tab.style.color = tab.textContent.toLowerCase() === this.activeTab ? 'white' : 'black';
        });

        // Update content based on active tab
        this.content.innerHTML = '';
        if (this.activeTab === 'pokedex') {
            this.showPokedex();
        } else if (this.activeTab === 'stats') {
            this.showStats();
        } else if (this.activeTab === 'help') {
            this.showHelp();
        }
    }

    showPokedex() {
        const pokedexContent = document.createElement('div');
        pokedexContent.style.cssText = `
            display: flex;
            flex-direction: column;
            gap: 15px;
            padding: 10px;
        `;

        // Add View All button
        const viewAllButton = document.createElement('button');
        viewAllButton.textContent = 'View All Pokemon';
        viewAllButton.style.cssText = `
            padding: 10px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.2s;
            margin-bottom: 10px;
        `;
        viewAllButton.onmouseover = () => viewAllButton.style.background = '#2980b9';
        viewAllButton.onmouseout = () => viewAllButton.style.background = '#3498db';
        viewAllButton.onclick = () => this.showFullPokedexView();
        pokedexContent.appendChild(viewAllButton);

        // Create grid for Pokemon cards
        const grid = document.createElement('div');
        grid.style.cssText = `
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
        `;

        this.stats.caughtPokemon.forEach(pokemon => {
            const card = document.createElement('div');
            card.style.cssText = `
                background: white;
                border-radius: 8px;
                padding: 10px;
                text-align: center;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                position: relative;
                cursor: pointer;
                transition: transform 0.2s;
            `;
            card.onmouseover = () => card.style.transform = 'translateY(-2px)';
            card.onmouseout = () => card.style.transform = 'translateY(0)';
            card.onclick = () => this.showFullPokedex(pokemon);

            const sprite = document.createElement('img');
            sprite.src = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${pokemon.shiny ? 'shiny/' : ''}${pokemon.id}.gif`;
            sprite.style.cssText = `
                width: 50px;
                height: 50px;
                margin: 0 auto;
                display: block;
                ${pokemon.shiny ? 'filter: brightness(1.2) saturate(1.2);' : ''}
            `;

            const name = document.createElement('div');
            name.textContent = pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1);
            name.style.cssText = `
                margin-top: 5px;
                font-weight: bold;
                color: #2c3e50;
            `;

            const rarity = document.createElement('div');
            rarity.textContent = pokemon.rarity.charAt(0).toUpperCase() + pokemon.rarity.slice(1);
            rarity.style.cssText = `
                font-size: 12px;
                color: #7f8c8d;
            `;

            card.appendChild(sprite);
            card.appendChild(name);
            card.appendChild(rarity);
            grid.appendChild(card);
        });

        pokedexContent.appendChild(grid);
        this.content.appendChild(pokedexContent);
    }

    showStats() {
        const statsContent = document.createElement('div');
        statsContent.style.cssText = `
            margin-bottom: 20px;
        `;

        statsContent.innerHTML = `
            <div style="margin-bottom: 20px;">
                <h3 style="margin: 0 0 10px 0;">Stats</h3>
                <p style="margin: 0;">Total Caught: ${this.stats.totalCaught}</p>
                <p style="margin: 0;">Shiny Caught: ${this.stats.shinyCaught}</p>
                <p style="margin: 0;">Common: ${this.stats.caughtByRarity.common}</p>
                <p style="margin: 0;">Uncommon: ${this.stats.caughtByRarity.uncommon}</p>
                <p style="margin: 0;">Rare: ${this.stats.caughtByRarity.rare}</p>
                <p style="margin: 0;">Legendary: ${this.stats.caughtByRarity.legendary}</p>
            </cdiv>
        `;

        this.content.appendChild(statsContent);
    }

    showHelp() {
        const helpContent = document.createElement('div');
        helpContent.style.cssText = `
            padding: 10px;
        `;

        helpContent.innerHTML = `
            <h3 style="margin: 0 0 10px 0;">How to Play</h3>
            <p style="margin: 0;">Click on Pokemon to catch them! Different Pokemon have different rarity levels.</p>
            <p style="margin: 10px 0 0 0;">✨ Shiny Pokemon are rare variants with a special appearance!</p>
            <p style="margin: 10px 0 0 0;">Rarity chances:</p>
            <ul style="margin: 5px 0 0 0; padding-left: 20px;">
                <li>Common: 70%</li>
                <li>Uncommon: 20%</li>
                <li>Rare: 9.5%</li>
                <li>Legendary: 0.5%</li>
            </ul>
            <h4 style="margin: 15px 0 10px 0;">Evolution System</h4>
            <p style="margin: 0;">- Catch Pokemon to earn candy</p>
            <p style="margin: 5px 0 0 0;">- Buy more candy with currency if needed</p>
            <p style="margin: 5px 0 0 0;">- Use candy to evolve your Pokemon</p>
            <p style="margin: 5px 0 0 0;">- Evolution costs vary by rarity</p>
        `;

        this.content.appendChild(helpContent);
    }

    switchTab(tab) {
        this.activeTab = tab;
        this.updateMenu();
    }

    toggleMenu() {
        if (this.menu.style.display === 'none') {
            this.menu.style.display = 'block';
            this.updateMenu();
        } else {
            this.menu.style.display = 'none';
        }
    }

    showFullPokedex(pokemon) {
        if (this.pokedexView) {
            return;
        }

        const pokedexView = document.createElement('div');
        pokedexView.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 400px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 4px 30px rgba(0,0,0,0.3);
            padding: 30px;
            z-index: 10001;
            display: flex;
            flex-direction: column;
            gap: 20px;
            font-family: Arial, sans-serif;
        `;

        // Header with close button
        const header = document.createElement('div');
        header.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 20px;
            border-bottom: 2px solid #eee;
        `;

        const title = document.createElement('h2');
        title.textContent = pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1);
        title.style.cssText = `
            margin: 0;
            color: #333;
            font-size: 24px;
        `;

        const closeButton = document.createElement('button');
        closeButton.innerHTML = '×';
        closeButton.style.cssText = `
            width: 40px;
            height: 40px;
            border: none;
            background: none;
            font-size: 28px;
            cursor: pointer;
            color: #666;
            transition: color 0.2s;
        `;
        closeButton.onclick = () => {
            pokedexView.remove();
            this.pokedexView = null;
        };

        header.appendChild(title);
        header.appendChild(closeButton);
        pokedexView.appendChild(header);

        // Pokemon details
        const details = document.createElement('div');
        details.style.cssText = `
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        `;

        const sprite = document.createElement('img');
        sprite.src = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${pokemon.shiny ? 'shiny/' : ''}${pokemon.id}.gif`;
        sprite.style.cssText = `
            width: 150px;
            height: 150px;
            ${pokemon.shiny ? 'filter: brightness(1.2) saturate(1.2);' : ''}
        `;

        const info = document.createElement('div');
        info.style.cssText = `
            text-align: center;
            width: 100%;
        `;

        const rarity = document.createElement('div');
        rarity.textContent = `Rarity: ${pokemon.rarity.charAt(0).toUpperCase() + pokemon.rarity.slice(1)}`;
        rarity.style.cssText = `
            font-size: 16px;
            color: #666;
            margin-bottom: 10px;
        `;

        const dateCaught = document.createElement('div');
        dateCaught.textContent = `Caught: ${new Date(pokemon.dateCaught).toLocaleString()}`;
        dateCaught.style.cssText = `
            font-size: 14px;
            color: #888;
            margin-bottom: 20px;
        `;

        if (pokemon.shiny) {
            const shinyBadge = document.createElement('div');
            shinyBadge.textContent = '✨ Shiny';
            shinyBadge.style.cssText = `
                color: #FFD700;
                font-weight: bold;
                margin-bottom: 10px;
            `;
            info.appendChild(shinyBadge);
        }

        info.appendChild(rarity);
        info.appendChild(dateCaught);

        // Action buttons
        const buttons = document.createElement('div');
        buttons.style.cssText = `
            display: flex;
            gap: 10px;
            width: 100%;
            margin-top: 10px;
            justify-content: space-between;
        `;

        if (pokemon.evolution) {
            const evolutionCost = this.getEvolutionCost(pokemon.rarity);
            const canEvolve = this.stats.candy >= evolutionCost;
            
            const evolveButton = document.createElement('button');
            evolveButton.textContent = 'Evolve';
            evolveButton.style.cssText = `
                flex: 1;
                padding: 10px;
                background: ${canEvolve ? '#2ecc71' : '#ccc'};
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                transition: background 0.2s;
            `;
            if (canEvolve) {
                evolveButton.onmouseover = () => evolveButton.style.background = '#27ae60';
                evolveButton.onmouseout = () => evolveButton.style.background = '#2ecc71';
                evolveButton.onclick = () => {
                    this.evolvePokemon(pokemon);
                };
            }
            buttons.appendChild(evolveButton);
        }

        const sellButton = document.createElement('button');
        sellButton.textContent = 'Sell';
        sellButton.style.cssText = `
            flex: 1;
            padding: 10px;
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.2s;
        `;
        sellButton.onmouseover = () => sellButton.style.background = '#c0392b';
        sellButton.onmouseout = () => sellButton.style.background = '#e74c3c';
        sellButton.onclick = () => {
            this.confirmSell(pokemon);
        };
        buttons.appendChild(sellButton);

        details.appendChild(sprite);
        details.appendChild(info);
        details.appendChild(buttons);
        pokedexView.appendChild(details);

        this.pokedexView = pokedexView;
        document.body.appendChild(pokedexView);
    }

    showFullPokedexView() {
        if (this.pokedexView) {
            return;
        }

        const pokedexView = document.createElement('div');
        pokedexView.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 1200px;
            height: 90vh;
            background: white;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0,0,0,0.2);
            display: flex;
            flex-direction: column;
            z-index: 1000;
            overflow: hidden;
        `;

        // Header with title and controls
        const header = document.createElement('div');
        header.style.cssText = `
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            align-items: center;
            position: relative;
        `;

        // Title
        const title = document.createElement('h2');
        title.textContent = 'Pokédex';
        title.style.cssText = `
            margin: 0;
            color: #333;
            font-size: 24px;
            flex: 1;
            min-width: 100px;
        `;

        // Search and sort container
        const controlsContainer = document.createElement('div');
        controlsContainer.style.cssText = `
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
            flex: 2;
            min-width: 200px;
        `;

        // Search input
        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.placeholder = 'Search Pokemon...';
        searchInput.style.cssText = `
            padding: 8px 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            width: 200px;
            font-size: 14px;
            transition: border-color 0.2s;
            flex: 1;
            min-width: 150px;
        `;
        searchInput.addEventListener('input', (e) => {
            this.filterText = e.target.value.toLowerCase();
            this.updatePokedexContent();
        });

        // Sort controls
        const sortControls = document.createElement('div');
        sortControls.style.cssText = `
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        `;

        ['name', 'rarity', 'date'].forEach(sortType => {
            const button = document.createElement('button');
            button.textContent = `Sort by ${sortType}`;
            button.style.cssText = `
                padding: 8px 12px;
                border: 2px solid #ddd;
                border-radius: 8px;
                background: ${this.sortOrder === sortType ? '#f0f0f0' : 'white'};
                color: ${this.sortOrder === sortType ? '#333' : '#666'};
                cursor: pointer;
                font-size: 14px;
                transition: all 0.2s;
                white-space: nowrap;
            `;
            button.onclick = () => {
                if (this.sortOrder === sortType) {
                    // Toggle sort direction
                    this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
                } else {
                    this.sortOrder = sortType;
                    this.sortDirection = 'asc';
                }
                this.updatePokedexContent();
                sortControls.querySelectorAll('button').forEach(btn => {
                    btn.style.background = btn === button ? '#f0f0f0' : 'white';
                    btn.style.borderColor = btn === button ? '#666' : '#ddd';
                });
                // Update button text to show sort direction
                button.textContent = `Sort by ${sortType} ${this.sortOrder === sortType ? (this.sortDirection === 'asc' ? '↑' : '↓') : ''}`;
            };
            sortControls.appendChild(button);
        });

        // Close button
        const closeButton = document.createElement('button');
        closeButton.innerHTML = '×';
        closeButton.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 30px;
            border: none;
            background: none;
            font-size: 24px;
            cursor: pointer;
            color: #666;
            transition: color 0.2s;
            z-index: 1;
        `;
        closeButton.onclick = () => {
            pokedexView.remove();
            this.pokedexView = null;
        };

        controlsContainer.appendChild(searchInput);
        controlsContainer.appendChild(sortControls);
        header.appendChild(title);
        header.appendChild(controlsContainer);
        header.appendChild(closeButton);
        pokedexView.appendChild(header);

        // Content container (grid of pokemon)
        const contentContainer = document.createElement('div');
        contentContainer.style.cssText = `
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            scrollbar-width: thin;
            scrollbar-color: #ddd #f5f5f5;
        `;
        contentContainer.id = 'pokedex-content';
        pokedexView.appendChild(contentContainer);

        this.pokedexView = pokedexView;
        document.body.appendChild(pokedexView);
        this.updatePokedexContent();
    }

    updatePokedexContent() {
        const contentContainer = document.getElementById('pokedex-content');
        if (!contentContainer) return;

        // Get filtered and sorted Pokemon
        let filteredPokemon = this.stats.caughtPokemon.filter(pokemon => {
            const matchesSearch = pokemon.name.toLowerCase().includes(this.filterText);
            return matchesSearch;
        });

        // Sort Pokemon
        filteredPokemon.sort((a, b) => {
            let comparison = 0;
            switch (this.sortOrder) {
                case 'name':
                    comparison = a.name.localeCompare(b.name);
                    break;
                case 'rarity':
                    comparison = this.getRarityValue(b.rarity) - this.getRarityValue(a.rarity);
                    break;
                case 'date':
                    comparison = new Date(b.dateCaught) - new Date(a.dateCaught);
                    break;
            }
            return this.sortDirection === 'asc' ? comparison : -comparison;
        });

        // Clear existing content
        contentContainer.innerHTML = '';

        // Add Pokemon cards
        filteredPokemon.forEach(pokemon => {
            const card = this.createPokemonCard(pokemon);
            contentContainer.appendChild(card);
        });
    }

    confirmSell(pokemon) {
        const baseValue = this.pokemonValues[pokemon.rarity];
        const value = pokemon.shiny ? baseValue * this.pokemonValues.shinyMultiplier : baseValue;
        const sellValue = Math.floor(value);

        if (confirm(`Sell ${pokemon.name} for ${sellValue} coins?`)) {
            this.sellPokemon(pokemon).then(success => {
                if (success) {
                    if (this.pokedexView) {
                        this.pokedexView.remove();
                        this.pokedexView = null;
                    }
                    this.updateMenu();
                }
            });
        }
    }

    catchPokemon(pokemon) {
        return new Promise((resolve) => {
            const handler = (event) => {
                if (event.data.type === 'CATCH_RESULT') {
                    window.removeEventListener('message', handler);
                    resolve(event.data.success);
                }
            };
            window.addEventListener('message', handler);
            
            this.dataManagerFrame.contentWindow.postMessage({
                type: 'CATCH_POKEMON',
                data: pokemon
            }, '*');
        });
    }

    createPokemon() {
        // The pokemon generated is given by the JWT hash of the domain, the user, and the current time
        return new Promise((resolve) => {
            const handler = (event) => {
                if (event.data.type === 'CREATE_POKEMON') {
                    window.removeEventListener('message', handler);
                    resolve(event.data.pokemon);
                }
            };
            window.addEventListener('message', handler);

            this.dataManagerFrame.contentWindow.postMessage({
                type: 'CREATE_POKEMON'
            }, '*');
        });
    }

    evolvePokemon(pokemon) {
        return new Promise((resolve) => {
            const handler = (event) => {
                if (event.data.type === 'EVOLUTION_RESULT') {
                    window.removeEventListener('message', handler);
                    if (!event.data.success) {
                        alert('Not enough candy!');
                    } else {
                        if (this.pokedexView) {
                            this.pokedexView.remove();
                            this.pokedexView = null;
                        }
                        this.updateMenu();
                    }
                    resolve(event.data.success);
                }
            };
            window.addEventListener('message', handler);
            
            this.dataManagerFrame.contentWindow.postMessage({
                type: 'EVOLVE_POKEMON',
                data: pokemon
            }, '*');
        });
    }

    sellPokemon(pokemon) {
        return new Promise((resolve) => {
            const handler = (event) => {
                if (event.data.type === 'SELL_RESULT') {
                    window.removeEventListener('message', handler);
                    resolve(event.data.success);
                }
            };
            window.addEventListener('message', handler);
            
            this.dataManagerFrame.contentWindow.postMessage({
                type: 'SELL_POKEMON',
                data: pokemon
            }, '*');
        });
    }

    purchaseCandy(amount) {
        return new Promise((resolve) => {
            const handler = (event) => {
                if (event.data.type === 'PURCHASE_RESULT') {
                    window.removeEventListener('message', handler);
                    if (!event.data.success) {
                        alert('Not enough currency!');
                    } else {
                        this.updateMenu();
                    }
                    resolve(event.data.success);
                }
            };
            window.addEventListener('message', handler);
            
            this.dataManagerFrame.contentWindow.postMessage({
                type: 'PURCHASE_CANDY',
                data: amount
            }, '*');
        });
    }

    getRarityValue(rarity) {
        const rarityValues = {
            common: 0,
            uncommon: 1,
            rare: 2,
            legendary: 3
        };
        return rarityValues[rarity] || 0;
    }

    createPokemonCard(pokemon) {
        const card = document.createElement('div');
        card.style.cssText = `
            padding: 20px;
            border-radius: 15px;
            background: ${pokemon.shiny ? '#FFF8E1' : '#f8f8f8'};
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
            min-width: 100px;
            max-width: 300px;
            min-height: 240px;
            max-height: 350px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            transition: transform 0.2s, box-shadow 0.2s;
            border: 2px solid ${pokemon.shiny ? '#FFD700' : 'transparent'};
            cursor: pointer;
        `;
        card.onmouseover = () => {
            card.style.transform = 'translateY(-5px)';
            card.style.boxShadow = '0 5px 15px rgba(0,0,0,0.1)';
        };
        card.onmouseout = () => {
            card.style.transform = 'translateY(0)';
            card.style.boxShadow = '0 2px 10px rgba(0,0,0,0.05)';
        };
        card.onclick = () => this.showFullPokedex(pokemon);

        const sprite = document.createElement('img');
        sprite.src = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${pokemon.shiny ? 'shiny/' : ''}${pokemon.id}.gif`;
        sprite.style.cssText = `
            width: 100px;
            height: 100px;
            max-width: 20vw;
            max-height: 10vh;
            margin-bottom: 10px;
            background-color: none;
        `;

        const name = document.createElement('div');
        name.textContent = pokemon.name;
        name.style.cssText = `
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        `;

        const rarity = document.createElement('div');
        rarity.textContent = this.getRarityStars(pokemon.rarity);
        rarity.style.cssText = `
            font-size: 1em;
            color: ${pokemon.shiny ? '#FFD700' : '#666'};
        `;

        const dateCaught = document.createElement('div');
        dateCaught.textContent = this.formatDate(pokemon.dateCaught);
        dateCaught.style.cssText = `
            font-size: 0.9em;
            color: #888;
        `;

        const buttonContainer = document.createElement('div');
        buttonContainer.style.cssText = `
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-direction: row;
            justify-content: space-between;
            width: 70%;
        `;

        // Check if Pokemon can evolve and has enough candy
        const evolutionCost = this.getEvolutionCost(pokemon.rarity);

        if (pokemon.evolution) {
            const canEvolve = this.stats.candy >= evolutionCost;
            const evolveButton = document.createElement('button');
            evolveButton.textContent = `Evolve`;
            evolveButton.style.cssText = `
                padding: 10px 15px;
                border: 2px solid #ddd;
                border-radius: 8px;
                background: ${canEvolve ? '#2ecc71' : '#ccc'};
                color: white;
                cursor: pointer;
                font-size: 14px;
                transition: background 0.2s;
            `;
            evolveButton.onclick = (e) => {
                e.stopPropagation(); // Prevent the card click event
                this.evolvePokemon(pokemon);
            };
            buttonContainer.appendChild(evolveButton);
        }

        const sellButton = document.createElement('button');
        sellButton.textContent = 'Sell';
        sellButton.style.cssText = `
            padding: 10px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            background: #e74c3c;
            color: white;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s;
        `;
        sellButton.onclick = (e) => {
            e.stopPropagation(); // Prevent the card click event
            this.confirmSell(pokemon);
        };
        buttonContainer.appendChild(sellButton);

        card.appendChild(sprite);
        card.appendChild(name);
        card.appendChild(rarity);
        card.appendChild(dateCaught);
        card.appendChild(buttonContainer);

        return card;
    }

    getEvolutionCost(rarity) {
        const costs = {
            common: 10,
            uncommon: 25,
            rare: 50,
            legendary: 100
        };
        return costs[rarity] || 0;
    }

    getRarityStars(rarity) {
        const stars = {
            common: '★',
            uncommon: '★★',
            rare: '★★★',
            legendary: '★★★★'
        };
        return stars[rarity] || '';
    }

    formatDate(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
    }
}
let stopSpawning = false;

class PokemonWalker {
    constructor(options = {}) {
        this.options = {
            maxPokemon: options.maxPokemon || 3,
            movementSpeed: options.movementSpeed || 1.5,
            spawnInterval: options.spawnInterval || 8000,
            minSize: options.minSize || 80,
            maxSize: options.maxSize || 120,
            edgeDistance: options.edgeDistance || 100,
            shinyChance: options.shinyChance || 0.01, // 1% chance for shiny
            ...options
        };

        // Define candy costs for evolution
        this.evolutionCosts = {
            common: 25,
            uncommon: 50,
            rare: 100,
            legendary: 500
        };
        
        // Load stats from localStorage or initialize new stats
        this.stats = this.loadStats();
        
        // Define Pokemon values
        this.pokemonValues = {
            common: 100,
            uncommon: 500,
            rare: 2000,
            legendary: 10000,
            shinyMultiplier: 5
        };
        
        this.pokemon = [];
        this.menuManager = new MenuManager(this.stats, this.pokemonValues);
        this.init();
        
        // Add resize handler
        window.addEventListener('resize', () => this.handleResize());
    }

    loadStats() {
        const savedStats = localStorage.getItem('pokemonWalkerStats');
        if (savedStats) {
            return JSON.parse(savedStats);
        }
        
        // Initialize new stats if none exist
        return {
            totalCaught: 0,
            caughtByRarity: {
                common: 0,
                uncommon: 0,
                rare: 0,
                legendary: 0
            },
            caughtPokemon: [],
            shinyCaught: 0,
            currency: 0,
            candy: 0
        };
    }

    saveStats() {
        localStorage.setItem('pokemonWalkerStats', JSON.stringify(this.stats));
    }

    init() {
        // Create container for Pokemon
        this.container = document.createElement('div');
        this.container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 999;
        `;
        document.body.appendChild(this.container);

        // Add backpack
        const backpack = UIComponents.createBackpack();
        backpack.addEventListener('click', () => this.menuManager.toggleMenu());
        document.body.appendChild(backpack);

        // Start spawning Pokemon
        this.startSpawning();
    }

    handleResize() {
        // Update Pokemon sizes on window resize
        this.pokemon.forEach(pokemon => {
            const size = this.calculatePokemonSize();
            pokemon.element.style.width = `${size}px`;
            pokemon.element.style.height = `${size}px`;
        });
    }

    calculatePokemonSize() {
        const screenArea = window.innerWidth * window.innerHeight;
        const baseSize = Math.sqrt(screenArea) * 0.02; // 2% of screen diagonal
        return Math.max(this.options.minSize, Math.min(this.options.maxSize, baseSize));
    }

    async throwPokeball(startX, startY, targetX, targetY, pokemon) {
        const pokeball = UIComponents.createPokeball(startX, startY);
        this.container.appendChild(pokeball);
        
        // Calculate throw trajectory
        const distance = Math.sqrt(Math.pow(targetX - startX, 2) + Math.pow(targetY - startY, 2));
        const duration = Math.min(2000, distance * 3); // Slower animation
        
        // Animate pokeball throw
        const startTime = Date.now();
        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(1, elapsed / duration);
            
            // Parabolic trajectory
            const x = startX + (targetX - startX) * progress;
            const y = startY + (targetY - startY) * progress - Math.sin(progress * Math.PI) * 100;
            
            pokeball.style.left = `${x}px`;
            pokeball.style.top = `${y}px`;
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                // Remove pokeball and trigger catch animation
                pokeball.remove();
                this.catchPokemon(pokemon);
            }
        };
        
        animate();
    }

    async createPokemon() {
        if (this.pokemon.length >= this.options.maxPokemon) return;
        // The pokemon generated is given by the JWT hash of the domain, the user, and the current time
        const selectedPokemon = await this.menuManager.createPokemon();
        if (!selectedPokemon) return;

        // rarity filtering rules: legendary pokemon only exist if time ^ id is divisible by 8
        if (selectedPokemon.rarity === 'legendary' && (Date.now() ^ selectedPokemon.id) % 8 !== 0) return;
        // same with mythical
        if (selectedPokemon.rarity === 'mythical' && (Date.now() ^ selectedPokemon.id) % 8 !== 0) return;
        // rares exist if time ^ id is divisible by 4
        if (selectedPokemon.rarity === 'rare' && (Date.now() ^ selectedPokemon.id) % 4 !== 0) return;
        // uncommons exist if time ^ id is divisible by 2
        if (selectedPokemon.rarity === 'uncommon' && (Date.now() ^ selectedPokemon.id) % 2 !== 0) return;

        const pokemon = document.createElement('div');
        const size = this.calculatePokemonSize();
        
        // Create sprite container
        const spriteContainer = document.createElement('div');
        spriteContainer.style.cssText = `
            position: absolute;
            width: 100%;
            height: 100%;
            background-image: url('https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${selectedPokemon.shiny ? 'shiny/' : ''}${selectedPokemon.id}.gif');
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            ${selectedPokemon.shiny ? 'filter: brightness(1.2) saturate(1.2);' : ''}
        `;
        
        // Create warning indicator
        const warningIndicator = document.createElement('div');
        warningIndicator.style.cssText = `
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            color: #ff4444;
            font-size: 12px;
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
            text-shadow: 0 0 2px white;
        `;
        
        pokemon.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            pointer-events: auto;
            cursor: pointer;
            transition: transform 0.2s, opacity 0.5s;
            will-change: transform;
            ${selectedPokemon.shiny ? 'box-shadow: 0 0 10px #FFD700;' : ''}
        `;

        pokemon.appendChild(spriteContainer);
        pokemon.appendChild(warningIndicator);

        // Determine if Pokemon should move horizontally or vertically
        const isHorizontal = Math.random() < 0.5;
        let startX, startY;
        
        if (isHorizontal) {
            startX = Math.random() < 0.5 ? 0 : window.innerWidth - size;
            startY = this.options.edgeDistance + Math.random() * (window.innerHeight - 2 * this.options.edgeDistance - size);
        } else {
            startX = this.options.edgeDistance + Math.random() * (window.innerWidth - 2 * this.options.edgeDistance - size);
            startY = Math.random() < 0.5 ? 0 : window.innerHeight - size;
        }

        pokemon.style.left = `${startX}px`;
        pokemon.style.top = `${startY}px`;

        // Add click handler for catching with pokeball animation
        pokemon.addEventListener('click', (e) => {
            const rect = pokemon.getBoundingClientRect();
            const pokemonX = rect.left + rect.width / 2;
            const pokemonY = rect.top + rect.height / 2;
            this.throwPokeball(e.clientX-50, e.clientY-50, e.clientX, e.clientY, pokemon);
        });

        this.container.appendChild(pokemon);
        
        const pokemonObj = {
            ...selectedPokemon,
            element: pokemon,
            x: startX,
            y: startY,
            direction: isHorizontal ? (startX === 0 ? 0 : Math.PI) : (startY === 0 ? Math.PI/2 : -Math.PI/2),
            speed: this.options.movementSpeed,
            size: size,
            isHorizontal: isHorizontal,
            lastDirectionChange: Date.now(),
            verticalOffset: 0,
            verticalSpeed: Math.random() * 0.01,
            warningIndicator: warningIndicator,
            intervalsPassed: 0,
            maxIntervals: 3
        };
        
        this.pokemon.push(pokemonObj);
        this.movePokemon(pokemonObj);
        
        // Start the run away timer
        this.startRunAwayTimer(pokemonObj);
    }

    movePokemon(pokemonObj) {
        const move = () => {
            if (!pokemonObj.element.parentNode) return;

            const now = Date.now();
            const timeSinceLastChange = now - pokemonObj.lastDirectionChange;

            // Update position
            pokemonObj.x += Math.cos(pokemonObj.direction) * pokemonObj.speed;
            pokemonObj.y += Math.sin(pokemonObj.direction) * pokemonObj.speed;

            // Add subtle floating motion
            pokemonObj.verticalOffset = Math.sin(now * pokemonObj.verticalSpeed) * 3;

            // Edge-based movement
            if (pokemonObj.isHorizontal) {
                // Horizontal movement
                if (pokemonObj.x <= 0 || pokemonObj.x >= window.innerWidth - pokemonObj.size) {
                    // Reverse direction
                    pokemonObj.direction = Math.PI - pokemonObj.direction;
                    pokemonObj.lastDirectionChange = now;
                }
                // Keep within edge distance
                if (pokemonObj.y < this.options.edgeDistance) {
                    pokemonObj.y = this.options.edgeDistance;
                } else if (pokemonObj.y > window.innerHeight - pokemonObj.size - this.options.edgeDistance) {
                    pokemonObj.y = window.innerHeight - pokemonObj.size - this.options.edgeDistance;
                }
            } else {
                // Vertical movement
                if (pokemonObj.y <= 0 || pokemonObj.y >= window.innerHeight - pokemonObj.size) {
                    // Reverse direction
                    pokemonObj.direction = -pokemonObj.direction;
                    pokemonObj.lastDirectionChange = now;
                }
                // Keep within edge distance
                if (pokemonObj.x < this.options.edgeDistance) {
                    pokemonObj.x = this.options.edgeDistance;
                } else if (pokemonObj.x > window.innerWidth - pokemonObj.size - this.options.edgeDistance) {
                    pokemonObj.x = window.innerWidth - pokemonObj.size - this.options.edgeDistance;
                }
            }

            // Update position with subtle floating
            pokemonObj.element.style.left = `${pokemonObj.x}px`;
            pokemonObj.element.style.top = `${pokemonObj.y + pokemonObj.verticalOffset}px`;

            // Flip sprite based on direction
            const scaleX = Math.cos(pokemonObj.direction) > 0 ? -1 : 1;
            pokemonObj.element.style.transform = `scaleX(${scaleX})`;

            requestAnimationFrame(move);
        };

        move();
    }

    catchPokemon(pokemon) {
        let pokemonObj = this.pokemon.find(p => p.element === pokemon);
        
        // Create a clean, serializable Pokemon object
        const caughtPokemon = {
            id: pokemonObj.id,
            name: pokemonObj.name,
            rarity: pokemonObj.rarity,
            shiny: pokemonObj.shiny,
            evolution: pokemonObj.evolution,
            dateCaught: pokemonObj.dateCaught,
            domainCaught: pokemonObj.domainCaught,
            userCaught: pokemonObj.userCaught
        };
        
        // Call menu manager's catchPokemon method
        if (this.menuManager) {
            this.menuManager.catchPokemon(caughtPokemon);
        } else {
            console.log('No menu manager found');
        }
        
        // Remove the Pokemon element
        pokemon.remove();
        this.pokemon = this.pokemon.filter(p => p.element !== pokemon);
    }

    sellPokemon(pokemon) {
        const index = this.stats.caughtPokemon.findIndex(p => p === pokemon);
        if (index === -1) return;

        const baseValue = this.pokemonValues[pokemon.rarity];
        const value = pokemon.shiny ? baseValue * this.pokemonValues.shinyMultiplier : baseValue;
        
        // Add 80% of the Pokemon's value to currency
        this.stats.currency += value;
        
        // Remove the Pokemon
        this.stats.caughtPokemon.splice(index, 1);
        this.stats.caughtByRarity[pokemon.rarity]--;
        this.stats.totalCaught--;
        if (pokemon.shiny) {
            this.stats.shinyCaught--;
        }

        // Save stats to localStorage
        this.saveStats();

        // Update menu
        if (this.menuManager) {
            this.menuManager.updateMenu();
        } else {
            console.log('No menu manager found');
        }
    }

    startSpawning() {
        setInterval(() => {
            if (!stopSpawning) {
                this.createPokemon();
            }
        }, this.options.spawnInterval);
    }

    startRunAwayTimer(pokemonObj) {
        const interval = this.options.spawnInterval;
        const timer = setInterval(() => {
            if (!pokemonObj.element.parentNode) {
                clearInterval(timer);
                return;
            }

            pokemonObj.intervalsPassed++;
            
            if (pokemonObj.intervalsPassed >= pokemonObj.maxIntervals) {
                // Make Pokemon run away
                pokemonObj.element.style.opacity = '0';
                setTimeout(() => {
                    if (pokemonObj.element.parentNode) {
                        pokemonObj.element.remove();
                        this.pokemon = this.pokemon.filter(p => p !== pokemonObj);
                    }
                }, 500);
                clearInterval(timer);
            } else {
                // Show warning indicator
                pokemonObj.warningIndicator.textContent = `⚠️`;
                pokemonObj.warningIndicator.style.opacity = '1';
                
                // Flash warning
                setTimeout(() => {
                    if (pokemonObj.warningIndicator) {
                        pokemonObj.warningIndicator.style.opacity = '0';
                    }
                }, 1000);
            }
        }, interval);
    }

    // Add candy purchase method
    purchaseCandy(amount) {
        const candyCost = amount * 10; // 10 currency per candy
        if (this.stats.currency >= candyCost) {
            this.stats.currency -= candyCost;
            this.stats.candy += amount;
            this.saveStats();
            if (this.menuManager) {
                this.menuManager.updateMenu();
            } else {
                console.log('No menu manager found');
            }
            return true;
        }
        return false;
    }

    // Add evolution method
    async evolvePokemon(pokemon) {
        const pokemonIndex = this.stats.caughtPokemon.findIndex(p => p === pokemon);
        if (pokemonIndex === -1) return false;
        if (!pokemon.evolution) return false;

        const candyCost = this.evolutionCosts[pokemon.rarity];
        if (this.stats.candy < candyCost) return false;

        const evolution = Array.isArray(pokemon.evolution) ? pokemon.evolution[Math.floor(Math.random() * pokemon.evolution.length)] : pokemon.evolution;

        // Perform evolution
        this.stats.candy -= candyCost;
        const evolvedPokemon = {
            ...pokemon,
            ...await getPokemonByName(evolution)
        };
        this.stats.caughtPokemon[pokemonIndex] = evolvedPokemon;

        // Save and update
        this.saveStats();
        if (this.menuManager) {
            this.menuManager.updateMenu();
        } else {
            console.log('No menu manager found');
        }
        return true;
    }
}


window.addEventListener('load', () => {
    let walker = new PokemonWalker({
        maxPokemon: 5,
        movementSpeed: 1,
        spawnInterval: 3000,
        minSize: 60,
        maxSize: 100,
        spawnChance: 0.5,
    });
    window.walker = walker;
});
